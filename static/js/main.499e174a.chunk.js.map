{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["ref","React","createRef","App","useState","input","setInput","Navbar","collapseOnSelect","expand","bg","variant","Container","Brand","href","Toggle","Collapse","id","Nav","className","targetRef","filename","toPdf","Button","onClick","autoFocus","value","onChange","e","target","children","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXASMA,EAAMC,IAAMC,YAqDHC,MApDf,WACE,MAAwBC,qBAAxB,mBAAMC,EAAN,KAAYC,EAAZ,KACA,OACM,gCACC,cAACC,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOC,QAAQ,OAAvD,SACP,eAACC,EAAA,EAAD,WACA,cAACL,EAAA,EAAOM,MAAR,CAAcC,KAAK,QAAnB,yCACA,cAACP,EAAA,EAAOQ,OAAR,CAAe,gBAAc,0BAC7B,eAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,wBAApB,UACE,cAACC,EAAA,EAAD,CAAKC,UAAU,YAEf,cAACD,EAAA,EAAD,UACE,cAAC,IAAD,CAAKE,UAAWpB,EAAKqB,SAAS,eAA9B,SACS,gBAAGC,EAAH,EAAGA,MAAH,OAAe,cAACC,EAAA,EAAD,CAAQZ,QAAQ,gBAAgBa,QAASF,EAAzC,uCAMpB,sBAAKH,UAAU,MAAf,UACA,0BACAM,WAAS,EACTN,UAAU,WACVO,MAAOrB,EACPsB,SACE,SAACC,GAAD,OAAOtB,EAASsB,EAAEC,OAAOH,UAE3B,qBAAK1B,IAAKA,EAAV,SACA,cAAC,IAAD,CAAe8B,SAAUzB,EAAO0B,cAAe,CAACC,KAAYb,UAAU,WAAYc,WAAY,CAC9FC,KAD8F,YAC1C,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,OAAQjB,EAAgC,EAAhCA,UAAWW,EAAqB,EAArBA,SAAaO,EAAQ,iBAC5CC,EAAQ,iBAAiBC,KAAKpB,GAAa,IACjD,OAAQiB,GAAUE,EAChB,cAAC,IAAD,aACER,SAAUU,OAAOV,GAAUW,QAAQ,MAAO,IAC1CC,SAAUJ,EAAM,GAChBK,OAAO,OACHN,IAGN,8CAAMlB,UAAWA,GAAekB,GAAhC,aACGP,kBCtCFc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.499e174a.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm';\nimport React from \"react\";\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport Pdf from \"react-to-pdf\";\nimport { Button,Container, Navbar ,Nav} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nconst ref = React.createRef();\nfunction App() {\n  const[input,setInput] = useState();\n  return (\n        <div>\n         <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\n  <Container>\n  <Navbar.Brand href=\"#home\">Sean Markdown PDF generator</Navbar.Brand>\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\n    <Nav className=\"me-auto\">\n    </Nav>\n    <Nav>\n      <Pdf targetRef={ref} filename=\"document.pdf\">\n              {({ toPdf }) => <Button variant=\"outline-light\" onClick={toPdf}>Generate Pdf</Button>}\n            </Pdf> \n    </Nav>\n  </Navbar.Collapse>\n  </Container>\n</Navbar>\n          <div className=\"App\">\n          <textarea \n          autoFocus \n          className=\"textarea\" \n          value={input} \n          onChange={\n            (e) => setInput(e.target.value)\n          }/>\n          <div ref={ref}>\n          <ReactMarkdown children={input} remarkPlugins={[remarkGfm]} className=\"markdown\"  components={{\n          code({node, inline, className, children, ...props}) {\n            const match = /language-(\\w+)/.exec(className || '')\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, '')}\n                language={match[1]}\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            )\n          }\n        }} />\n          </div>\n\n          </div>\n          </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}