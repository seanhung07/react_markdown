{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","input","setInput","className","autoFocus","value","onChange","e","target","children","remarkPlugins","remarkGfm","components","code","node","inline","props","match","exec","String","replace","language","PreTag","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAsCeA,MAhCf,WACE,MAAwBC,qBAAxB,mBAAMC,EAAN,KAAYC,EAAZ,KACA,OACE,sBAAKC,UAAU,MAAf,UACE,0BACAC,WAAS,EACTD,UAAU,WACVE,MAAOJ,EACPK,SACE,SAACC,GAAD,OAAOL,EAASK,EAAEC,OAAOH,UAE3B,cAAC,IAAD,CAAeI,SAAUR,EAAOS,cAAe,CAACC,KAAYR,UAAU,WAAYS,WAAY,CAC9FC,KAD8F,YAC1C,EAA9CC,KAA+C,IAAzCC,EAAwC,EAAxCA,OAAQZ,EAAgC,EAAhCA,UAAWM,EAAqB,EAArBA,SAAaO,EAAQ,iBAC5CC,EAAQ,iBAAiBC,KAAKf,GAAa,IACjD,OAAQY,GAAUE,EAChB,cAAC,IAAD,aACER,SAAUU,OAAOV,GAAUW,QAAQ,MAAO,IAC1CC,SAAUJ,EAAM,GAChBK,OAAO,OACHN,IAGN,8CAAMb,UAAWA,GAAea,GAAhC,aACGP,aCjBEc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.463a53ea.chunk.js","sourcesContent":["import './App.css';\nimport { useState } from 'react';\nimport ReactMarkdown from 'react-markdown'\nimport remarkGfm from 'remark-gfm';\nimport {Prism as SyntaxHighlighter} from 'react-syntax-highlighter'\nimport {light} from 'react-syntax-highlighter/dist/esm/styles/prism'\nfunction App() {\n  const[input,setInput] = useState();\n  return (\n    <div className=\"App\">\n      <textarea \n      autoFocus \n      className=\"textarea\" \n      value={input} \n      onChange={\n        (e) => setInput(e.target.value)\n      }/>\n      <ReactMarkdown children={input} remarkPlugins={[remarkGfm]} className=\"markdown\"  components={{\n      code({node, inline, className, children, ...props}) {\n        const match = /language-(\\w+)/.exec(className || '')\n        return !inline && match ? (\n          <SyntaxHighlighter\n            children={String(children).replace(/\\n$/, '')}\n            language={match[1]}\n            PreTag=\"div\"\n            {...props}\n          />\n        ) : (\n          <code className={className} {...props}>\n            {children}\n          </code>\n        )\n      }\n    }} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}